#!/usr/bin/env run shebang

BINGO_VERSION="0.3.0"
# ##############################################################################
#
# BINGO - The missing package manager for golang binaries
#
#   Bingo makes installing and managing golang-compiled binaries a bit easier
#
# Project Home
#
#   https://github.com/TekWizely/bingo
#
# Requirement: RUN
#
#   Bingo exists as a Runfile, and requires the Run tool to operate:
#
#     https://github.com/TekWizely/run
#
# Work Folders
#
#   Bingo requires the following work folders:
#
#     Bin Folder     : Where compiled binaries are installed
#     Package Folder : Where packages are downloaded / compiled
#     Cache Folder   : Where to store Go cache files
#
# Shell Variables
#
#   Individual
#
#     Each of these folders can be individually configured via shell variables:
#
#       $BINGO_BIN
#       $BINGO_PKG
#       $BINGO_CACHE
#
#   Fallback: BINGO_HOME
#
#     If the $BINGO_HOME variable is defined, bingo will use it as a fall-back
#     for any folder that is not individually configured, i.e:
#
#       $BINGO_HOME/bin
#       $BINGO_HOME/pkg
#       $BINGO_HOME/cache
#
#   Default: HOME/.bingo
#
#     As a final default, bingo will use $HOME/.bingo i.e:
#
#       $HOME/.bingo/bin
#       $HOME/.bingo/pkg
#       $HOME/.bingo/cache
#
#   Forcing go get
#
#     By default, bingo uses `go install` to download + install packages.
#     If you're using a version of go prior to v1.16, you can instruct bingo
#     to use `go get`:
#
#     Via command-line:
#
#       bingo install --useget ...
#
#     Via environment variable:
#
#       BINGO_USE_GET=1 bingo install ...
#
# License
#
#   The bingo project is released under the MIT License:
#
#     https://opensource.org/licenses/MIT
#
# ##############################################################################

.SHELL = bash

# Assumes runfile is executable
#
EXPORT BINGO ?= ${.RUNFILE}

##
# Show bingo version
# EXPORT BINGO_VERSION
#
## NOTE: Generates an error if invoked outside of 'shebang' mode.
#
version:
	echo ${BINGO_VERSION}

##
# Install a package + binary
# Compiles a package and installs the compiled binary into the
# configured bin folder.
#
# OPTION cmd     -n,--name    <name>    Specify name to use for installed binary
# OPTION version    --version <version> Specify package version
# OPTION QUIET   -q,--quiet             Limit output to error messages
# OPTION USE_GET    --useget            Use go get instead of go install
# USAGE <package>
# USAGE (install under default name)
# USAGE <package>@<version>
# USAGE (install specific version)
# USAGE --version <version> <package>
# USAGE (install specific version)
# USAGE -n <name> <package>
# USAGE (install under alternative name)
#
install:
	set -e

	pkg="${1}"
	if [ -z "${pkg}" ]; then
		echo "No package provided. See 'bingo help install'" 1>&2
		exit 2
	fi

	eval $( "${BINGO}" shellenv )

	pkgversion="${pkg#*@}"
	if [ "${pkgversion}" == "${pkg}" ]; then
		unset pkgversion
	fi

	if [ -n "${version}" -a -n "${pkgversion}" -a "${version}" != "${pkgversion}" ]; then
		echo "Detected 2 different version specifiers ('${version}' != '${pkgversion}')" 1>&2
		exit 2
	fi

	if [ ! -z "${pkgversion}" ]; then
		export pkg="${pkg%@*}"
		export version="${pkgversion}"
	fi

	pkgbin="$( basename "${pkg}" )"

	if [ -z "${cmd}" ]; then
		cmd="${pkgbin}"
	fi

	if [ -z "${cmd}" ]; then
		echo "Unable to determine binary name" 1>&2
		exit 2
	fi

	if [ -e "${BINGO_BIN}/${cmd}" ]; then
		echo "Command ${cmd} already exists at ${BINGO_BIN}"  1>&2
		exit 2
	fi

	PKG_ROOT="${BINGO_PKG}/${cmd}"

	if [ -z "${PKG_ROOT}" ]; then
		echo "Unable to determine package root folder" 1>&2
		exit 2
	fi

	if [ -d "${PKG_ROOT}" ]; then
		echo "Package with name ${cmd} appears to already exist at ${PKG_ROOT}" 1>&2
		exit 2
	fi

	mkdir -p "${PKG_ROOT}"

	if [ ! -d "${PKG_ROOT}" ]; then
		echo "Unable to create package root folder ${PKG_ROOT}" 1>&2
		exit 2
	fi

	# Trap errors and try to cleanup
	function _remove_pkg_root {
		rc=$?
		if [ "${rc}" != "0" ]; then
			echo "Error detected, attempting to cleanup ${PKG_ROOT}" 1>&2
			go clean --modcache
			rm -rf "${PKG_ROOT}"
		fi
		exit ${rc}
	}
	trap _remove_pkg_root EXIT

	export GOPATH="${PKG_ROOT}"
	cd "${GOPATH}"

	export GOBIN="${GOPATH}/bin"

	VERBOSE=""
	[ -z "${QUIET}" ] && VERBOSE="1"

	[ -z "${QUIET}" ] && echo "Installing binary ${cmd} from package ${pkg}${version:+@$version}"
	[ -z "${QUIET}" ] && echo "Downloading & compiling package (folder: '${PKG_ROOT}')"

	INSTALL="install"
	if [ -n "${BINGO_USE_GET}" -o -n "${USE_GET}" ]; then
		INSTALL="get"
		[ -z "${QUIET}" ] && echo "Using 'go get' instead of 'go install'"
	fi
	go "${INSTALL}" "${VERBOSE:+-v}" "${pkg}${version:+@$version}"

	PKG_CMD="${GOBIN}/${pkgbin}"

	if [ ! -f "${PKG_CMD}" ]; then
		echo "Compiled binary ${pkgbin} not found" 1>&2
		exit 2
	fi

	if [ ! -x "${PKG_CMD}" ]; then
		echo "Compiled binary ${pkgbin} is not executable" 1>&2
		exit 2
	fi

	[ -z "${QUIET}" ] && echo "Installing binary (file: '${BINGO_BIN}/${cmd}')"
	echo "${pkg}" > "${PKG_ROOT}/pkg.txt"
	ln -s "${PKG_CMD}" "${BINGO_BIN}/${cmd}"

	[ -z "${QUIET}" ] && echo "Done"

	exit 0 # Ensure trap gets 0 on success

##
# Update a binary's package
#
# OPTION QUIET   -q,--quiet             Limit output to error messages
# OPTION version    --version <version> Specify package version
# OPTION USE_GET    --useget            Use go get instead of go install
# USAGE <cmd>
# USAGE (update to latest version)
# USAGE <cmd>@<version>
# USAGE (update to specific version)
# USAGE --version <version> <cmd>
# USAGE (update to specific version)
#
update:
	set -e

	cmd="${1}"
	if [ -z "${cmd}" ]; then
		echo "No binary provided. See 'bingo help update'" 1>&2
		exit 2
	fi

	eval $( "${BINGO}" shellenv )

	pkgversion="${cmd#*@}"
	if [ "${pkgversion}" == "${cmd}" ]; then
		unset pkgversion
	fi

	if [ -n "${version}" -a -n "${pkgversion}" -a "${version}" != "${pkgversion}" ]; then
		echo "Detected 2 different version specifiers ('${version}' != '${pkgversion}')" 1>&2
		exit 2
	fi

	if [ ! -z "${pkgversion}" ]; then
		export cmd="${cmd%@*}"
		export version="${pkgversion}"
	fi

	if [ ! -e "${BINGO_BIN}/${cmd}" ]; then
		echo "Binary ${cmd} not found in ${BINGO_BIN}" 1>&2
		exit 2
	fi

	if [ ! -L "${BINGO_BIN}/${cmd}" ]; then
		echo "Binary ${cmd} does not appear to be managed by bingo" 1>&2
		exit 2
	fi

	PKG_CMD=$( readlink "${BINGO_BIN}/${cmd}" )

	if [[ "${PKG_CMD}" != "${BINGO_PKG}"* ]] ; then
		echo "Binary ${cmd} does not appear to be managed by bingo" 1>&2
		exit 2
	fi

	export GOBIN=$( dirname "${PKG_CMD}" )

	PKG_ROOT=$( dirname "${GOBIN}" )

	PKG_NAME=${PKG_ROOT#$BINGO_PKG/}

	if [[ "${PKG_NAME}" != "${cmd}" ]]; then
		echo "Binary ${cmd} does not match not package installed name ${PKG_NAME}" 1>&2
		exit 2
	fi

	pkg=""
	if [ -f "${PKG_ROOT}/pkg.txt" ]; then
		pkg="$( cat "${PKG_ROOT}/pkg.txt" )"
	fi

	if [ -z "${pkg}" ]; then
		echo "Unable to determine package name for binary ${cmd}" 1>&2
		exit 2
	fi

	export GOPATH="${PKG_ROOT}"
	cd "${GOPATH}"

	VERBOSE=""
	[ -z "${QUIET}" ] && VERBOSE="1"

	[ -z "${QUIET}" ] && echo "Updating ${cmd} package ${pkg}${version:+ to $version}"

	INSTALL="install"
	if [ -n "${BINGO_USE_GET}" -o -n "${USE_GET}" ]; then
		INSTALL="get"
		[ -z "${QUIET}" ] && echo "Using 'go get' instead of 'go install'"
	fi
	go "${INSTALL}" "${VERBOSE:+-v}" "${pkg}${version:+@$version}"

	[ -z "${QUIET}" ] && echo "Done"

##
# Uninstall a package + binary
#
# OPTION QUIET -q,--quiet Limit output to error messages
# USAGE <cmd>
#
uninstall:
	set -e

	cmd="${1}"
	if [ -z "${cmd}" ]; then
		echo "No binary provided. See 'bingo help uninstall'" 1>&2
		exit 2
	fi

	eval $( "${BINGO}" shellenv )

	if [ ! -e "${BINGO_BIN}/${cmd}" ]; then
		echo "Binary ${cmd} not found in ${BINGO_BIN}" 1>&2
		exit 2
	fi

	if [ ! -L "${BINGO_BIN}/${cmd}" ]; then
		echo "Binary ${cmd} does not appear to be managed by bingo" 1>&2
		exit 2
	fi

	PKG_CMD=$( readlink "${BINGO_BIN}/${cmd}" )

	if [[ "${PKG_CMD}" != "${BINGO_PKG}"* ]] ; then
		echo "Binary ${cmd} does not appear to be managed by bingo" 1>&2
		exit 2
	fi

	export GOBIN=$( dirname "${PKG_CMD}" )

	PKG_ROOT=$( dirname "${GOBIN}" )

	PKG_NAME=${PKG_ROOT#$BINGO_PKG/}

	if [[ "${PKG_NAME}" != "${cmd}" ]]; then
		echo "Binary ${cmd} does match package installed name ${PKG_NAME}" 1>&2
		exit 2
	fi

	pkg=""
	if [ -f "${PKG_ROOT}/pkg.txt" ]; then
		pkg="$( cat "${PKG_ROOT}/pkg.txt" )"
	fi

	if [ -z "${pkg}" ]; then
		echo "Unable to determine package name for binary ${cmd}" 1>&2
		exit 2
	fi

	export GOPATH="${PKG_ROOT}"
	cd "${GOPATH}"

	[ -z "${QUIET}" ] && echo "Uninstalling binary ${cmd} from package ${pkg}"

	[ -z "${QUIET}" ] && echo "Removing binary (file: '${BINGO_BIN}/${cmd}')"
	rm "${BINGO_BIN}/${cmd}"

	[ -z "${QUIET}" ] && echo "Removing package (folder: '${PKG_ROOT}')"
	go clean --modcache
	rm -rf "${PKG_ROOT}"

	[ -z "${QUIET}" ] && echo "Done"

##
# print a binary's package name
#
package:
	set -e

	cmd="${1}"
	if [ -z "${cmd}" ]; then
		echo "No binary provided. See 'bingo help package'" 1>&2
		exit 2
	fi

	eval $( "${BINGO}" shellenv )

	if [ ! -e "${BINGO_BIN}/${cmd}" ]; then
		echo "Binary ${cmd} not found in ${BINGO_BIN}" 1>&2
		exit 2
	fi

	if [ ! -L "${BINGO_BIN}/${cmd}" ]; then
		echo "Binary ${cmd} does not appear to be managed by bingo" 1>&2
		exit 2
	fi

	PKG_CMD=$( readlink "${BINGO_BIN}/${cmd}" )

	if [[ "${PKG_CMD}" != "${BINGO_PKG}"* ]] ; then
		echo "Binary ${cmd} does not appear to be managed by bingo" 1>&2
		exit 2
	fi

	export GOBIN=$( dirname "${PKG_CMD}" )

	PKG_ROOT=$( dirname "${GOBIN}" )

	if [ ! -f "${PKG_ROOT}/pkg.txt" ]; then
		echo "[ERROR] No pkg.txt file found in ${PKG_ROOT}" 1>&2
		exit 2
	fi

	pkg="$( cat "${PKG_ROOT}/pkg.txt" )"

	echo "${pkg}"

##
# List all bingo-managed binaries in the configured bin folder
#
# OPTION QUIET     -q Limit generated output
# OPTION SHOW_PKGS -p,--packages Show binary's associated package
#
installed:
	set -e

	eval $( "${BINGO}" shellenv )

	[ -z "${QUIET}" ] && echo "Bingo-managed binaries (folder: '${BINGO_BIN}')"
	[ -z "${QUIET}" ] && echo ""

	for cmd in $(ls -1 "${BINGO_BIN}/" ); do # TODO: A better way to glob this?
		if [ ! -e "${BINGO_BIN}/${cmd}" ]; then
			continue
		fi

		if [ ! -L "${BINGO_BIN}/${cmd}" ]; then
			continue
		fi

		# Skip if not a bingo-managed binary
		PKG_CMD=$( readlink "${BINGO_BIN}/${cmd}" )
		if [[ "${PKG_CMD}" != "${BINGO_PKG}"* ]] ; then
			continue
		fi

		prefix=" - "
		[ -z "${QUIET}" ] || prefix=""

		if [ -z "${SHOW_PKGS}" ]; then
				echo "${prefix}${cmd}"
		else
			export GOBIN=$( dirname "${PKG_CMD}" )
			PKG_ROOT=$( dirname "${GOBIN}" )
			pkg="?"
			if [ -f "${PKG_ROOT}/pkg.txt" ]; then
				pkg="$( cat "${PKG_ROOT}/pkg.txt" )"
			fi
			echo  "${prefix}${cmd} ${pkg}"
		fi

	done

##
# Print bingo bin folder path
#
bin:
	set -e

	eval $( "${BINGO}" shellenv )

	echo "${BINGO_BIN}"

##
# (for internal use)
# Generates shell statements for settings bingo constants.
#
shellenv:
	set -e

	# BIN
	#
	if [ -z "${BINGO_BIN}" ]; then
		if [ -z "${BINGO_HOME}" ]; then
			if [ -z "${HOME}" ]; then
				echo "Cannot determine bingo bin directory" 1>&2
				exit 2
			fi
			BINGO_BIN="${HOME}/.bingo/bin"
		else
			BINGO_BIN="${BINGO_HOME}/bin"
		fi
	fi
	if [ ! -d "${BINGO_BIN}" ]; then
		mkdir -p "${BINGO_BIN}"
	fi

	# PKG
	#
	if [ -z "${BINGO_PKG}" ]; then
		if [ -z "${BINGO_HOME}" ]; then
			if [ -z "${HOME}" ]; then
				echo "Cannot determine bingo pkg directory" 1>&2
				exit 2
			fi
			BINGO_PKG="${HOME}/.bingo/pkg"
		else
			BINGO_PKG="${BINGO_HOME}/pkg"
		fi
	fi
	if [ ! -d "${BINGO_PKG}" ]; then
		mkdir -p "${BINGO_PKG}"
	fi

	# CACHE
	#
	if [ -z "${BINGO_CACHE}" ]; then
		if [ -z "${BINGO_HOME}" ]; then
			if [ -z "${HOME}" ]; then
				echo "Cannot determine bingo cache directory" 1>&2
				exit 2
			fi
			BINGO_CACHE="${HOME}/.bingo/cache"
		else
			BINGO_CACHE="${BINGO_HOME}/cache"
		fi
	fi
	if [ ! -d "${BINGO_CACHE}" ]; then
		mkdir -p "${BINGO_CACHE}"
	fi

	echo "export BINGO_BIN='${BINGO_BIN}'"
	echo "export BINGO_PKG='${BINGO_PKG}'"
	echo "export BINGO_CACHE='${BINGO_CACHE}'"
	echo "export GOCACHE='${BINGO_CACHE}'"
	echo "export GOPROXY='https://proxy.golang.org,direct'"
	echo "export GO111MODULE=on"
	# Go uses a global default if not set, so we set one.
	# Must be overriden by command if actually needed.
	echo "export GOPATH='/tmp/bingo_gopath'"
	echo "export GOBIN="
